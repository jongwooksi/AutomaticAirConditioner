
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000a76  00000aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a76  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b54  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001280  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b6  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000865  00000000  00000000  0000288a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057a  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a2e  00000000  00000000  00003812  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00004240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  8e:	0c 94 39 05 	jmp	0xa72	; 0xa72 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_pulse_enable>:


uint8_t MODE = 4;

void LCD_pulse_enable(void) {       // 하강 에지에서 동작
	PORT_CONTROL |= (1 << E_PIN);    // E를 HIGH로
  96:	85 b1       	in	r24, 0x05	; 5
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_pulse_enable+0x8>
  a2:	00 00       	nop
	_delay_us(1);
	PORT_CONTROL &= ~(1 << E_PIN);   // E를 LOW로
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f e9       	ldi	r24, 0x9F	; 159
  ac:	9f e0       	ldi	r25, 0x0F	; 15
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_pulse_enable+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCD_pulse_enable+0x1e>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <LCD_write_data>:
	_delay_ms(1);
}

void LCD_write_data(uint8_t data)
{
  b8:	cf 93       	push	r28
  ba:	c8 2f       	mov	r28, r24
	PORT_CONTROL |= (1 << RS_PIN);    // 문자 출력에서 RS는 1
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	85 b9       	out	0x05, r24	; 5
	if(MODE == 8){
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c6:	88 30       	cpi	r24, 0x08	; 8
  c8:	21 f4       	brne	.+8      	; 0xd2 <LCD_write_data+0x1a>
		PORT_DATA = data;             // 출력할 문자 데이터
  ca:	cb b9       	out	0x0b, r28	; 11
		LCD_pulse_enable();           // 문자 출력
  cc:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_pulse_enable>
  d0:	0c c0       	rjmp	.+24     	; 0xea <LCD_write_data+0x32>
	}
	else{
		PORT_DATA = data & 0xF0;      // 상위 4비트
  d2:	8c 2f       	mov	r24, r28
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	8b b9       	out	0x0b, r24	; 11
		LCD_pulse_enable();
  d8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_pulse_enable>
		PORT_DATA = (data << 4) & 0xF0;    // 하위 4비트
  dc:	20 e1       	ldi	r18, 0x10	; 16
  de:	c2 9f       	mul	r28, r18
  e0:	c0 01       	movw	r24, r0
  e2:	11 24       	eor	r1, r1
  e4:	8b b9       	out	0x0b, r24	; 11
		LCD_pulse_enable();
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_pulse_enable>
	}
}
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <LCD_write_command>:

void LCD_write_command(uint8_t command)
{
  ee:	cf 93       	push	r28
  f0:	c8 2f       	mov	r28, r24
	PORT_CONTROL &= ~(1 << RS_PIN);    // 명령어 실행에서 RS는 0
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	85 b9       	out	0x05, r24	; 5
	
	if(MODE == 8){
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	21 f4       	brne	.+8      	; 0x108 <LCD_write_command+0x1a>
		PORT_DATA = command;        // 데이터 핀에 명령어 전달
 100:	cb b9       	out	0x0b, r28	; 11
		LCD_pulse_enable();            // 명령어 실행
 102:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_pulse_enable>
 106:	0c c0       	rjmp	.+24     	; 0x120 <LCD_write_command+0x32>
	}
	else{
		PORT_DATA = command & 0xF0;    // 상위 4비트
 108:	8c 2f       	mov	r24, r28
 10a:	80 7f       	andi	r24, 0xF0	; 240
 10c:	8b b9       	out	0x0b, r24	; 11
		LCD_pulse_enable();
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_pulse_enable>
		PORT_DATA = (command << 4) & 0xF0;    // 하위 4비트
 112:	20 e1       	ldi	r18, 0x10	; 16
 114:	c2 9f       	mul	r28, r18
 116:	c0 01       	movw	r24, r0
 118:	11 24       	eor	r1, r1
 11a:	8b b9       	out	0x0b, r24	; 11
		LCD_pulse_enable();
 11c:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_pulse_enable>
	}
}
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <LCD_clear>:

void LCD_clear(void)
{
	LCD_write_command(COMMAND_CLEAR_DISPLAY);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 77 00 	call	0xee	; 0xee <LCD_write_command>
 12a:	8f e3       	ldi	r24, 0x3F	; 63
 12c:	9f e1       	ldi	r25, 0x1F	; 31
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_clear+0xa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_clear+0x10>
 134:	00 00       	nop
 136:	08 95       	ret

00000138 <LCD_init>:
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	80 e7       	ldi	r24, 0x70	; 112
 13c:	92 e0       	ldi	r25, 0x02	; 2
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <LCD_init+0x6>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_init+0x10>
 148:	00 00       	nop
void LCD_init(void)
{
	_delay_ms(50);
	
	// 연결 핀을 출력으로 설정
	if(MODE == 8) DDR_DATA |= 0xFF;
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	21 f4       	brne	.+8      	; 0x15a <LCD_init+0x22>
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	8a b9       	out	0x0a, r24	; 10
 158:	03 c0       	rjmp	.+6      	; 0x160 <LCD_init+0x28>
	else DDR_DATA |= 0xF0;
 15a:	8a b1       	in	r24, 0x0a	; 10
 15c:	80 6f       	ori	r24, 0xF0	; 240
 15e:	8a b9       	out	0x0a, r24	; 10
	
	DDR_CONTROL |= (1 << RS_PIN) | (1 << E_PIN);
 160:	84 b1       	in	r24, 0x04	; 4
 162:	83 60       	ori	r24, 0x03	; 3
 164:	84 b9       	out	0x04, r24	; 4

	if(MODE == 8)
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	21 f4       	brne	.+8      	; 0x176 <LCD_init+0x3e>
	LCD_write_command(COMMAND_8_BIT_MODE);        // 8비트 모드
 16e:	88 e3       	ldi	r24, 0x38	; 56
 170:	0e 94 77 00 	call	0xee	; 0xee <LCD_write_command>
 174:	06 c0       	rjmp	.+12     	; 0x182 <LCD_init+0x4a>
	else{
		LCD_write_command(0x02);                  // 4비트 모드 추가 명령
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	0e 94 77 00 	call	0xee	; 0xee <LCD_write_command>
		LCD_write_command(COMMAND_4_BIT_MODE);    // 4비트 모드
 17c:	88 e2       	ldi	r24, 0x28	; 40
 17e:	0e 94 77 00 	call	0xee	; 0xee <LCD_write_command>
	}

	// display on/off control
	// 화면 on, 커서 off, 커서 깜빡임 off
	uint8_t command = 0x08 | (1 << COMMAND_DISPLAY_ON_OFF_BIT);
	LCD_write_command(command);
 182:	8c e0       	ldi	r24, 0x0C	; 12
 184:	0e 94 77 00 	call	0xee	; 0xee <LCD_write_command>

	LCD_clear();    // 화면 지움
 188:	0e 94 92 00 	call	0x124	; 0x124 <LCD_clear>

	// Entry Mode Set
	// 출력 후 커서를 오른쪽으로 옮김, 즉, DDRAM의 주소가 증가하며 화면 이동은 없음
	LCD_write_command(0x06);
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 77 00 	call	0xee	; 0xee <LCD_write_command>
 192:	08 95       	ret

00000194 <LCD_write_string>:
}

void LCD_write_string(char *string)
{
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i = 0; string[i]; i++)            // 종료 문자를 만날 때까지
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <LCD_write_string+0x12>
	LCD_write_data(string[i]);             // 문자 단위 출력
 1a0:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_write_data>
}

void LCD_write_string(char *string)
{
	uint8_t i;
	for(i = 0; string[i]; i++)            // 종료 문자를 만날 때까지
 1a4:	cf 5f       	subi	r28, 0xFF	; 255
 1a6:	f8 01       	movw	r30, r16
 1a8:	ec 0f       	add	r30, r28
 1aa:	f1 1d       	adc	r31, r1
 1ac:	80 81       	ld	r24, Z
 1ae:	81 11       	cpse	r24, r1
 1b0:	f7 cf       	rjmp	.-18     	; 0x1a0 <LCD_write_string+0xc>
	LCD_write_data(string[i]);             // 문자 단위 출력
}
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <LCD_goto_XY>:

void LCD_goto_XY(uint8_t row, uint8_t col)
{
	col %= 16;        // [0 15]
 1ba:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2;         // [0 1]
 1bc:	81 70       	andi	r24, 0x01	; 1

	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) + col;
 1be:	90 e4       	ldi	r25, 0x40	; 64
 1c0:	89 9f       	mul	r24, r25
 1c2:	60 0d       	add	r22, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);    // 커서 이동
 1c8:	80 58       	subi	r24, 0x80	; 128
 1ca:	0e 94 77 00 	call	0xee	; 0xee <LCD_write_command>
 1ce:	08 95       	ret

000001d0 <ADC_INIT>:
}


void ADC_INIT(unsigned char channel)
{
	ADMUX |= 0x40;             // AVCC를 기준 전압으로 선택
 1d0:	ac e7       	ldi	r26, 0x7C	; 124
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	9c 91       	ld	r25, X
 1d6:	90 64       	ori	r25, 0x40	; 64
 1d8:	9c 93       	st	X, r25
	
	ADCSRA |= 0x07;            // 분주비 설정
 1da:	ea e7       	ldi	r30, 0x7A	; 122
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	90 81       	ld	r25, Z
 1e0:	97 60       	ori	r25, 0x07	; 7
 1e2:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);    // ADC 활성화
 1e4:	90 81       	ld	r25, Z
 1e6:	90 68       	ori	r25, 0x80	; 128
 1e8:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADATE);   // 자동 트리거 모드
 1ea:	90 81       	ld	r25, Z
 1ec:	90 62       	ori	r25, 0x20	; 32
 1ee:	90 83       	st	Z, r25

	ADMUX |= ((ADMUX & 0xE0) | channel);    // 채널 선택
 1f0:	9c 91       	ld	r25, X
 1f2:	2c 91       	ld	r18, X
 1f4:	90 7e       	andi	r25, 0xE0	; 224
 1f6:	89 2b       	or	r24, r25
 1f8:	82 2b       	or	r24, r18
 1fa:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);    // 변환 시작
 1fc:	80 81       	ld	r24, Z
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <read_ADC>:
}

int read_ADC(void)
{
	while(!(ADCSRA & (1 << ADIF)));   // 변환 종료 대기
 204:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 208:	84 ff       	sbrs	r24, 4
 20a:	fc cf       	rjmp	.-8      	; 0x204 <read_ADC>
	return ADC;                		// 10비트 값을 반환
 20c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 210:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 214:	08 95       	ret

00000216 <Timer_init>:



void Timer_init(void){
	TCCR0B |= (1 << CS02) | (1 << CS00); // 분주비 1024로 설정
 216:	85 b5       	in	r24, 0x25	; 37
 218:	85 60       	ori	r24, 0x05	; 5
 21a:	85 bd       	out	0x25, r24	; 37
 21c:	08 95       	ret

0000021e <measure_distance>:
}

uint8_t measure_distance(void)
{
	// 트리거 핀으로 펄스 출력
	PORTC |= (1 << PC0); // HIGH 값 출력
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	81 60       	ori	r24, 0x01	; 1
 222:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	85 e3       	ldi	r24, 0x35	; 53
 226:	8a 95       	dec	r24
 228:	f1 f7       	brne	.-4      	; 0x226 <measure_distance+0x8>
 22a:	00 00       	nop
	_delay_us(10); // 10마이크로초 대기
	PORTC &= ~(1 << PC0); // LOW 값 출력
 22c:	88 b1       	in	r24, 0x08	; 8
 22e:	8e 7f       	andi	r24, 0xFE	; 254
 230:	88 b9       	out	0x08, r24	; 8

	// 에코 핀이 HIGH가 될 때까지 대기
	TCNT0 = 0;
 232:	16 bc       	out	0x26, r1	; 38
	while(!(PINC & 0x02))
 234:	03 c0       	rjmp	.+6      	; 0x23c <measure_distance+0x1e>
	if(TCNT0 > 250) return 255; // 장애물이 없는 경우
 236:	86 b5       	in	r24, 0x26	; 38
 238:	8b 3f       	cpi	r24, 0xFB	; 251
 23a:	68 f5       	brcc	.+90     	; 0x296 <measure_distance+0x78>
	_delay_us(10); // 10마이크로초 대기
	PORTC &= ~(1 << PC0); // LOW 값 출력

	// 에코 핀이 HIGH가 될 때까지 대기
	TCNT0 = 0;
	while(!(PINC & 0x02))
 23c:	31 9b       	sbis	0x06, 1	; 6
 23e:	fb cf       	rjmp	.-10     	; 0x236 <measure_distance+0x18>
	if(TCNT0 > 250) return 255; // 장애물이 없는 경우

	// 에코 핀이 LOW가 될 때까지의 시간 측정
	TCNT0 = 0; // 카운터를 0으로 초기화
 240:	16 bc       	out	0x26, r1	; 38
	while(PINC & 0x02){
 242:	05 c0       	rjmp	.+10     	; 0x24e <measure_distance+0x30>
		if (TCNT0 > 250){ // 측정 불가능
 244:	86 b5       	in	r24, 0x26	; 38
 246:	8b 3f       	cpi	r24, 0xFB	; 251
 248:	10 f0       	brcs	.+4      	; 0x24e <measure_distance+0x30>
			TCNT0 = 0;
 24a:	16 bc       	out	0x26, r1	; 38
			break;
 24c:	02 c0       	rjmp	.+4      	; 0x252 <measure_distance+0x34>
	while(!(PINC & 0x02))
	if(TCNT0 > 250) return 255; // 장애물이 없는 경우

	// 에코 핀이 LOW가 될 때까지의 시간 측정
	TCNT0 = 0; // 카운터를 0으로 초기화
	while(PINC & 0x02){
 24e:	31 99       	sbic	0x06, 1	; 6
 250:	f9 cf       	rjmp	.-14     	; 0x244 <measure_distance+0x26>
			break;
		}
	}

	// 에코 핀의 펄스폭을 마이크로초 단위로 계산
	double pulse_width = TCNT0 * PRESCALER * 1000000.0 / F_CPU;
 252:	66 b5       	in	r22, 0x26	; 38
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	76 2f       	mov	r23, r22
 258:	66 27       	eor	r22, r22
 25a:	77 0f       	add	r23, r23
 25c:	77 0f       	add	r23, r23
 25e:	07 2e       	mov	r0, r23
 260:	00 0c       	add	r0, r0
 262:	88 0b       	sbc	r24, r24
 264:	99 0b       	sbc	r25, r25
 266:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__floatsisf>
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	34 e2       	ldi	r19, 0x24	; 36
 26e:	44 e7       	ldi	r20, 0x74	; 116
 270:	59 e4       	ldi	r21, 0x49	; 73
 272:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	34 e2       	ldi	r19, 0x24	; 36
 27a:	44 e7       	ldi	r20, 0x74	; 116
 27c:	5b e4       	ldi	r21, 0x4B	; 75
 27e:	0e 94 3f 03 	call	0x67e	; 0x67e <__divsf3>

	return pulse_width / 58; // 센티미터 단위 거리 반환
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	48 e6       	ldi	r20, 0x68	; 104
 288:	52 e4       	ldi	r21, 0x42	; 66
 28a:	0e 94 3f 03 	call	0x67e	; 0x67e <__divsf3>
 28e:	0e 94 b1 03 	call	0x762	; 0x762 <__fixunssfsi>
 292:	86 2f       	mov	r24, r22
 294:	08 95       	ret
	PORTC &= ~(1 << PC0); // LOW 값 출력

	// 에코 핀이 HIGH가 될 때까지 대기
	TCNT0 = 0;
	while(!(PINC & 0x02))
	if(TCNT0 > 250) return 255; // 장애물이 없는 경우
 296:	8f ef       	ldi	r24, 0xFF	; 255

	// 에코 핀의 펄스폭을 마이크로초 단위로 계산
	double pulse_width = TCNT0 * PRESCALER * 1000000.0 / F_CPU;

	return pulse_width / 58; // 센티미터 단위 거리 반환
}
 298:	08 95       	ret

0000029a <INIT_TIMER1>:

void INIT_TIMER1(void)
{
	// Fast PWM 모드, TOP = ICR1
	TCCR1A |= (1 << WGM11);
 29a:	e0 e8       	ldi	r30, 0x80	; 128
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
 2a4:	a1 e8       	ldi	r26, 0x81	; 129
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	8c 91       	ld	r24, X
 2aa:	88 61       	ori	r24, 0x18	; 24
 2ac:	8c 93       	st	X, r24

	TCCR1B |= (1 << CS11);		// 분주율 8, 2MHz
 2ae:	8c 91       	ld	r24, X
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	8c 93       	st	X, r24
	
	ICR1 = 40000;				// 20ms 주기
 2b4:	80 e4       	ldi	r24, 0x40	; 64
 2b6:	9c e9       	ldi	r25, 0x9C	; 156
 2b8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2bc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	TCCR1A |= (1 << COM1B1);		// 비반전 모드
 2c0:	80 81       	ld	r24, Z
 2c2:	80 62       	ori	r24, 0x20	; 32
 2c4:	80 83       	st	Z, r24
	
	//  OC1B (PB2, 아두이노 10번) 핀을 출력으로 설정
	DDRB |= (1 << PB2);
 2c6:	84 b1       	in	r24, 0x04	; 4
 2c8:	84 60       	ori	r24, 0x04	; 4
 2ca:	84 b9       	out	0x04, r24	; 4
 2cc:	08 95       	ret

000002ce <main>:
}


int main(void)
{
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	c1 54       	subi	r28, 0x41	; 65
 2d8:	d1 09       	sbc	r29, r1
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
	int read;
	float input_voltage, temperature;
	int stage = 1;
	
	UART_INIT();
 2e4:	0e 94 ba 02 	call	0x574	; 0x574 <UART_INIT>

	
	stage = 0;
	
	uint8_t distance;
	DDRC |= 0x01; // 트리거 핀 출력으로 설정
 2e8:	87 b1       	in	r24, 0x07	; 7
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	87 b9       	out	0x07, r24	; 7
	//    DDRC &= ~0xFD; // 에코 핀 입력으로 설정
	DDRC &= 0xFD; // 에코 핀 입력으로 설정
 2ee:	87 b1       	in	r24, 0x07	; 7
 2f0:	8d 7f       	andi	r24, 0xFD	; 253
 2f2:	87 b9       	out	0x07, r24	; 7
	UART_INIT(); // UART 통신 초기화
 2f4:	0e 94 ba 02 	call	0x574	; 0x574 <UART_INIT>
	Timer_init(); // 타이머 초기화
 2f8:	0e 94 0b 01 	call	0x216	; 0x216 <Timer_init>
	DDRD = 0x08;
 2fc:	88 e0       	ldi	r24, 0x08	; 8
 2fe:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 300:	1b b8       	out	0x0b, r1	; 11
	while(1)
	{
		distance = measure_distance(); // 거리 측정
 302:	0e 94 0f 01 	call	0x21e	; 0x21e <measure_distance>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	33 ed       	ldi	r19, 0xD3	; 211
 30a:	90 e3       	ldi	r25, 0x30	; 48
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	30 40       	sbci	r19, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x3e>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x48>
 316:	00 00       	nop

		_delay_ms(1000);
	
		if (distance < 8)
 318:	88 30       	cpi	r24, 0x08	; 8
 31a:	98 f7       	brcc	.-26     	; 0x302 <main+0x34>
			break;
			
		}
	}
	   
	PORTD = 0x08;
 31c:	18 e0       	ldi	r17, 0x08	; 8
 31e:	1b b9       	out	0x0b, r17	; 11
 320:	ef ef       	ldi	r30, 0xFF	; 255
 322:	f7 ea       	ldi	r31, 0xA7	; 167
 324:	21 e6       	ldi	r18, 0x61	; 97
 326:	e1 50       	subi	r30, 0x01	; 1
 328:	f0 40       	sbci	r31, 0x00	; 0
 32a:	20 40       	sbci	r18, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x58>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x62>
 330:	00 00       	nop
	_delay_ms(2000);	
	
	if (stage == 1)
	{
		ADC_INIT(2);
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ADC_INIT>
		
		DDRB = 0x08;			// PB3 연결된 LED 출력
 338:	14 b9       	out	0x04, r17	; 4
		PORTB = 0x00;
 33a:	15 b8       	out	0x05, r1	; 5
		
		LCD_init();					
 33c:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_init>
		LCD_write_string("Welcome!");	
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_write_string>
 348:	3f ef       	ldi	r19, 0xFF	; 255
 34a:	87 ea       	ldi	r24, 0xA7	; 167
 34c:	91 e6       	ldi	r25, 0x61	; 97
 34e:	31 50       	subi	r19, 0x01	; 1
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	90 40       	sbci	r25, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <main+0x80>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0x8a>
 358:	00 00       	nop
		_delay_ms(2000);		
		LCD_clear();				
 35a:	0e 94 92 00 	call	0x124	; 0x124 <LCD_clear>
		
		LCD_write_string("Thank you for");	
 35e:	8a e0       	ldi	r24, 0x0A	; 10
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_write_string>
		LCD_goto_XY(1, 0);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_goto_XY>
		LCD_write_string("your hard work!");	
 36e:	88 e1       	ldi	r24, 0x18	; 24
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_write_string>
 376:	ef ef       	ldi	r30, 0xFF	; 255
 378:	f7 ea       	ldi	r31, 0xA7	; 167
 37a:	21 e6       	ldi	r18, 0x61	; 97
 37c:	e1 50       	subi	r30, 0x01	; 1
 37e:	f0 40       	sbci	r31, 0x00	; 0
 380:	20 40       	sbci	r18, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0xae>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0xb8>
 386:	00 00       	nop
		_delay_ms(2000);			
		
		LCD_clear();				
 388:	0e 94 92 00 	call	0x124	; 0x124 <LCD_clear>
		
		stage++;
	}
	
	INIT_TIMER1();
 38c:	0e 94 4d 01 	call	0x29a	; 0x29a <INIT_TIMER1>
	
	
	if (stage == 2)
	{
		while (1) {
			read = read_ADC();
 390:	0e 94 02 01 	call	0x204	; 0x204 <read_ADC>
			
			input_voltage = read * 5.0 / 1023.0;
 394:	bc 01       	movw	r22, r24
 396:	99 0f       	add	r25, r25
 398:	88 0b       	sbc	r24, r24
 39a:	99 0b       	sbc	r25, r25
 39c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__floatsisf>
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	40 ea       	ldi	r20, 0xA0	; 160
 3a6:	50 e4       	ldi	r21, 0x40	; 64
 3a8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 ec       	ldi	r19, 0xC0	; 192
 3b0:	4f e7       	ldi	r20, 0x7F	; 127
 3b2:	54 e4       	ldi	r21, 0x44	; 68
 3b4:	0e 94 3f 03 	call	0x67e	; 0x67e <__divsf3>
			temperature = (input_voltage - 0.5) * 100.0;
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	5f e3       	ldi	r21, 0x3F	; 63
 3c0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__subsf3>
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	48 ec       	ldi	r20, 0xC8	; 200
 3ca:	52 e4       	ldi	r21, 0x42	; 66
 3cc:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 3d0:	6b 01       	movw	r12, r22
 3d2:	7c 01       	movw	r14, r24
			
			char buffer[65] = {0};
 3d4:	8e 01       	movw	r16, r28
 3d6:	0f 5f       	subi	r16, 0xFF	; 255
 3d8:	1f 4f       	sbci	r17, 0xFF	; 255
 3da:	81 e4       	ldi	r24, 0x41	; 65
 3dc:	f8 01       	movw	r30, r16
 3de:	11 92       	st	Z+, r1
 3e0:	8a 95       	dec	r24
 3e2:	e9 f7       	brne	.-6      	; 0x3de <main+0x110>
				
			LCD_write_string("Int. temp. : ");	
 3e4:	88 e2       	ldi	r24, 0x28	; 40
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_write_string>
			LCD_goto_XY(0, 12);
 3ec:	6c e0       	ldi	r22, 0x0C	; 12
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_goto_XY>
			LCD_write_string(itoa((uint32_t)temperature,buffer, 10));
 3f4:	c7 01       	movw	r24, r14
 3f6:	b6 01       	movw	r22, r12
 3f8:	0e 94 b1 03 	call	0x762	; 0x762 <__fixunssfsi>
 3fc:	dc 01       	movw	r26, r24
 3fe:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 400:	4a e0       	ldi	r20, 0x0A	; 10
 402:	b8 01       	movw	r22, r16
 404:	0e 94 04 05 	call	0xa08	; 0xa08 <__itoa_ncheck>
 408:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_write_string>
			LCD_write_string("`C");
 40c:	86 e3       	ldi	r24, 0x36	; 54
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_write_string>
 414:	ff ef       	ldi	r31, 0xFF	; 255
 416:	21 ee       	ldi	r18, 0xE1	; 225
 418:	34 e0       	ldi	r19, 0x04	; 4
 41a:	f1 50       	subi	r31, 0x01	; 1
 41c:	20 40       	sbci	r18, 0x00	; 0
 41e:	30 40       	sbci	r19, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 424:	00 00       	nop
	
			
			_delay_ms(100);						// 0.5초 마다 출력
			
			
			if (temperature >= 35)
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	4c e0       	ldi	r20, 0x0C	; 12
 42c:	52 e4       	ldi	r21, 0x42	; 66
 42e:	c7 01       	movw	r24, r14
 430:	b6 01       	movw	r22, r12
 432:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__gesf2>
 436:	88 23       	and	r24, r24
 438:	ec f0       	brlt	.+58     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
			{
				OCR1B = PULSE_MIN;		// 0도
 43a:	ea e8       	ldi	r30, 0x8A	; 138
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	84 e1       	ldi	r24, 0x14	; 20
 440:	95 e0       	ldi	r25, 0x05	; 5
 442:	91 83       	std	Z+1, r25	; 0x01
 444:	80 83       	st	Z, r24
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	93 ed       	ldi	r25, 0xD3	; 211
 44a:	20 e3       	ldi	r18, 0x30	; 48
 44c:	81 50       	subi	r24, 0x01	; 1
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	20 40       	sbci	r18, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 456:	00 00       	nop
				_delay_ms(ROTATION_DELAY1000);
				OCR1B = PULSE_MAX;		// 180도
 458:	8c e3       	ldi	r24, 0x3C	; 60
 45a:	94 e1       	ldi	r25, 0x14	; 20
 45c:	91 83       	std	Z+1, r25	; 0x01
 45e:	80 83       	st	Z, r24
 460:	3f ef       	ldi	r19, 0xFF	; 255
 462:	83 ed       	ldi	r24, 0xD3	; 211
 464:	90 e3       	ldi	r25, 0x30	; 48
 466:	31 50       	subi	r19, 0x01	; 1
 468:	80 40       	sbci	r24, 0x00	; 0
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 470:	00 00       	nop
 472:	74 c0       	rjmp	.+232    	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
				_delay_ms(ROTATION_DELAY1000);
			
			}	
			
			else if (temperature >= 30)
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	40 ef       	ldi	r20, 0xF0	; 240
 47a:	51 e4       	ldi	r21, 0x41	; 65
 47c:	c7 01       	movw	r24, r14
 47e:	b6 01       	movw	r22, r12
 480:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__gesf2>
 484:	88 23       	and	r24, r24
 486:	ec f0       	brlt	.+58     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
			{
				OCR1B = PULSE_MIN;		// 0도
 488:	ea e8       	ldi	r30, 0x8A	; 138
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	84 e1       	ldi	r24, 0x14	; 20
 48e:	95 e0       	ldi	r25, 0x05	; 5
 490:	91 83       	std	Z+1, r25	; 0x01
 492:	80 83       	st	Z, r24
 494:	2f ef       	ldi	r18, 0xFF	; 255
 496:	37 e9       	ldi	r19, 0x97	; 151
 498:	8a e3       	ldi	r24, 0x3A	; 58
 49a:	21 50       	subi	r18, 0x01	; 1
 49c:	30 40       	sbci	r19, 0x00	; 0
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
				_delay_ms(ROTATION_DELAY1200);
				OCR1B = PULSE_MAX;		// 180도
 4a6:	8c e3       	ldi	r24, 0x3C	; 60
 4a8:	94 e1       	ldi	r25, 0x14	; 20
 4aa:	91 83       	std	Z+1, r25	; 0x01
 4ac:	80 83       	st	Z, r24
 4ae:	9f ef       	ldi	r25, 0xFF	; 255
 4b0:	e7 e9       	ldi	r30, 0x97	; 151
 4b2:	fa e3       	ldi	r31, 0x3A	; 58
 4b4:	91 50       	subi	r25, 0x01	; 1
 4b6:	e0 40       	sbci	r30, 0x00	; 0
 4b8:	f0 40       	sbci	r31, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4be:	00 00       	nop
 4c0:	4d c0       	rjmp	.+154    	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
				_delay_ms(ROTATION_DELAY1200);
			
		
			}
			
			else if (temperature >= 25)
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	48 ec       	ldi	r20, 0xC8	; 200
 4c8:	51 e4       	ldi	r21, 0x41	; 65
 4ca:	c7 01       	movw	r24, r14
 4cc:	b6 01       	movw	r22, r12
 4ce:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__gesf2>
 4d2:	88 23       	and	r24, r24
 4d4:	ec f0       	brlt	.+58     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
			{
				OCR1B = PULSE_MIN;		// 0도
 4d6:	ea e8       	ldi	r30, 0x8A	; 138
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	84 e1       	ldi	r24, 0x14	; 20
 4dc:	95 e0       	ldi	r25, 0x05	; 5
 4de:	91 83       	std	Z+1, r25	; 0x01
 4e0:	80 83       	st	Z, r24
 4e2:	2f ef       	ldi	r18, 0xFF	; 255
 4e4:	3b e5       	ldi	r19, 0x5B	; 91
 4e6:	84 e4       	ldi	r24, 0x44	; 68
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	30 40       	sbci	r19, 0x00	; 0
 4ec:	80 40       	sbci	r24, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4f2:	00 00       	nop
				_delay_ms(ROTATION_DELAY1400);
				OCR1B = PULSE_MAX;		// 180도
 4f4:	8c e3       	ldi	r24, 0x3C	; 60
 4f6:	94 e1       	ldi	r25, 0x14	; 20
 4f8:	91 83       	std	Z+1, r25	; 0x01
 4fa:	80 83       	st	Z, r24
 4fc:	9f ef       	ldi	r25, 0xFF	; 255
 4fe:	eb e5       	ldi	r30, 0x5B	; 91
 500:	f4 e4       	ldi	r31, 0x44	; 68
 502:	91 50       	subi	r25, 0x01	; 1
 504:	e0 40       	sbci	r30, 0x00	; 0
 506:	f0 40       	sbci	r31, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 50c:	00 00       	nop
 50e:	26 c0       	rjmp	.+76     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
				_delay_ms(ROTATION_DELAY1400);
			
			}
			
			else if (temperature >= 20)
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	40 ea       	ldi	r20, 0xA0	; 160
 516:	51 e4       	ldi	r21, 0x41	; 65
 518:	c7 01       	movw	r24, r14
 51a:	b6 01       	movw	r22, r12
 51c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__gesf2>
 520:	88 23       	and	r24, r24
 522:	e4 f0       	brlt	.+56     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
			{
				OCR1B = PULSE_MIN;		// 0도
 524:	ea e8       	ldi	r30, 0x8A	; 138
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	84 e1       	ldi	r24, 0x14	; 20
 52a:	95 e0       	ldi	r25, 0x05	; 5
 52c:	91 83       	std	Z+1, r25	; 0x01
 52e:	80 83       	st	Z, r24
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	3f e1       	ldi	r19, 0x1F	; 31
 534:	8e e4       	ldi	r24, 0x4E	; 78
 536:	21 50       	subi	r18, 0x01	; 1
 538:	30 40       	sbci	r19, 0x00	; 0
 53a:	80 40       	sbci	r24, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 540:	00 00       	nop
				_delay_ms(ROTATION_DELAY1600);
				OCR1B = PULSE_MAX;		// 180도
 542:	8c e3       	ldi	r24, 0x3C	; 60
 544:	94 e1       	ldi	r25, 0x14	; 20
 546:	91 83       	std	Z+1, r25	; 0x01
 548:	80 83       	st	Z, r24
 54a:	9f ef       	ldi	r25, 0xFF	; 255
 54c:	ef e1       	ldi	r30, 0x1F	; 31
 54e:	fe e4       	ldi	r31, 0x4E	; 78
 550:	91 50       	subi	r25, 0x01	; 1
 552:	e0 40       	sbci	r30, 0x00	; 0
 554:	f0 40       	sbci	r31, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 558:	00 c0       	rjmp	.+0      	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 55a:	00 00       	nop
 55c:	2f ef       	ldi	r18, 0xFF	; 255
 55e:	33 ed       	ldi	r19, 0xD3	; 211
 560:	80 e3       	ldi	r24, 0x30	; 48
 562:	21 50       	subi	r18, 0x01	; 1
 564:	30 40       	sbci	r19, 0x00	; 0
 566:	80 40       	sbci	r24, 0x00	; 0
 568:	e1 f7       	brne	.-8      	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
 56c:	00 00       	nop
			
			}
			
			_delay_ms(1000);
			
			LCD_clear();
 56e:	0e 94 92 00 	call	0x124	; 0x124 <LCD_clear>
		}
 572:	0e cf       	rjmp	.-484    	; 0x390 <main+0xc2>

00000574 <UART_INIT>:
﻿#include <avr/io.h>

void UART_INIT(void)
{
	UCSR0A |= _BV(U2X0);
 574:	e0 ec       	ldi	r30, 0xC0	; 192
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	80 83       	st	Z, r24
	UBRR0H = 0x00;
 57e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 207;
 582:	8f ec       	ldi	r24, 0xCF	; 207
 584:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0C |= 0x06;
 588:	e2 ec       	ldi	r30, 0xC2	; 194
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
 58e:	86 60       	ori	r24, 0x06	; 6
 590:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
 592:	e1 ec       	ldi	r30, 0xC1	; 193
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	80 61       	ori	r24, 0x10	; 16
 59a:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
 59c:	80 81       	ld	r24, Z
 59e:	88 60       	ori	r24, 0x08	; 8
 5a0:	80 83       	st	Z, r24
 5a2:	08 95       	ret

000005a4 <__subsf3>:
 5a4:	50 58       	subi	r21, 0x80	; 128

000005a6 <__addsf3>:
 5a6:	bb 27       	eor	r27, r27
 5a8:	aa 27       	eor	r26, r26
 5aa:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__addsf3x>
 5ae:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_round>
 5b2:	0e 94 26 04 	call	0x84c	; 0x84c <__fp_pscA>
 5b6:	38 f0       	brcs	.+14     	; 0x5c6 <__addsf3+0x20>
 5b8:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscB>
 5bc:	20 f0       	brcs	.+8      	; 0x5c6 <__addsf3+0x20>
 5be:	39 f4       	brne	.+14     	; 0x5ce <__addsf3+0x28>
 5c0:	9f 3f       	cpi	r25, 0xFF	; 255
 5c2:	19 f4       	brne	.+6      	; 0x5ca <__addsf3+0x24>
 5c4:	26 f4       	brtc	.+8      	; 0x5ce <__addsf3+0x28>
 5c6:	0c 94 23 04 	jmp	0x846	; 0x846 <__fp_nan>
 5ca:	0e f4       	brtc	.+2      	; 0x5ce <__addsf3+0x28>
 5cc:	e0 95       	com	r30
 5ce:	e7 fb       	bst	r30, 7
 5d0:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>

000005d4 <__addsf3x>:
 5d4:	e9 2f       	mov	r30, r25
 5d6:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_split3>
 5da:	58 f3       	brcs	.-42     	; 0x5b2 <__addsf3+0xc>
 5dc:	ba 17       	cp	r27, r26
 5de:	62 07       	cpc	r22, r18
 5e0:	73 07       	cpc	r23, r19
 5e2:	84 07       	cpc	r24, r20
 5e4:	95 07       	cpc	r25, r21
 5e6:	20 f0       	brcs	.+8      	; 0x5f0 <__addsf3x+0x1c>
 5e8:	79 f4       	brne	.+30     	; 0x608 <__addsf3x+0x34>
 5ea:	a6 f5       	brtc	.+104    	; 0x654 <__addsf3x+0x80>
 5ec:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_zero>
 5f0:	0e f4       	brtc	.+2      	; 0x5f4 <__addsf3x+0x20>
 5f2:	e0 95       	com	r30
 5f4:	0b 2e       	mov	r0, r27
 5f6:	ba 2f       	mov	r27, r26
 5f8:	a0 2d       	mov	r26, r0
 5fa:	0b 01       	movw	r0, r22
 5fc:	b9 01       	movw	r22, r18
 5fe:	90 01       	movw	r18, r0
 600:	0c 01       	movw	r0, r24
 602:	ca 01       	movw	r24, r20
 604:	a0 01       	movw	r20, r0
 606:	11 24       	eor	r1, r1
 608:	ff 27       	eor	r31, r31
 60a:	59 1b       	sub	r21, r25
 60c:	99 f0       	breq	.+38     	; 0x634 <__addsf3x+0x60>
 60e:	59 3f       	cpi	r21, 0xF9	; 249
 610:	50 f4       	brcc	.+20     	; 0x626 <__addsf3x+0x52>
 612:	50 3e       	cpi	r21, 0xE0	; 224
 614:	68 f1       	brcs	.+90     	; 0x670 <__addsf3x+0x9c>
 616:	1a 16       	cp	r1, r26
 618:	f0 40       	sbci	r31, 0x00	; 0
 61a:	a2 2f       	mov	r26, r18
 61c:	23 2f       	mov	r18, r19
 61e:	34 2f       	mov	r19, r20
 620:	44 27       	eor	r20, r20
 622:	58 5f       	subi	r21, 0xF8	; 248
 624:	f3 cf       	rjmp	.-26     	; 0x60c <__addsf3x+0x38>
 626:	46 95       	lsr	r20
 628:	37 95       	ror	r19
 62a:	27 95       	ror	r18
 62c:	a7 95       	ror	r26
 62e:	f0 40       	sbci	r31, 0x00	; 0
 630:	53 95       	inc	r21
 632:	c9 f7       	brne	.-14     	; 0x626 <__addsf3x+0x52>
 634:	7e f4       	brtc	.+30     	; 0x654 <__addsf3x+0x80>
 636:	1f 16       	cp	r1, r31
 638:	ba 0b       	sbc	r27, r26
 63a:	62 0b       	sbc	r22, r18
 63c:	73 0b       	sbc	r23, r19
 63e:	84 0b       	sbc	r24, r20
 640:	ba f0       	brmi	.+46     	; 0x670 <__addsf3x+0x9c>
 642:	91 50       	subi	r25, 0x01	; 1
 644:	a1 f0       	breq	.+40     	; 0x66e <__addsf3x+0x9a>
 646:	ff 0f       	add	r31, r31
 648:	bb 1f       	adc	r27, r27
 64a:	66 1f       	adc	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	88 1f       	adc	r24, r24
 650:	c2 f7       	brpl	.-16     	; 0x642 <__addsf3x+0x6e>
 652:	0e c0       	rjmp	.+28     	; 0x670 <__addsf3x+0x9c>
 654:	ba 0f       	add	r27, r26
 656:	62 1f       	adc	r22, r18
 658:	73 1f       	adc	r23, r19
 65a:	84 1f       	adc	r24, r20
 65c:	48 f4       	brcc	.+18     	; 0x670 <__addsf3x+0x9c>
 65e:	87 95       	ror	r24
 660:	77 95       	ror	r23
 662:	67 95       	ror	r22
 664:	b7 95       	ror	r27
 666:	f7 95       	ror	r31
 668:	9e 3f       	cpi	r25, 0xFE	; 254
 66a:	08 f0       	brcs	.+2      	; 0x66e <__addsf3x+0x9a>
 66c:	b0 cf       	rjmp	.-160    	; 0x5ce <__addsf3+0x28>
 66e:	93 95       	inc	r25
 670:	88 0f       	add	r24, r24
 672:	08 f0       	brcs	.+2      	; 0x676 <__addsf3x+0xa2>
 674:	99 27       	eor	r25, r25
 676:	ee 0f       	add	r30, r30
 678:	97 95       	ror	r25
 67a:	87 95       	ror	r24
 67c:	08 95       	ret

0000067e <__divsf3>:
 67e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__divsf3x>
 682:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_round>
 686:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscB>
 68a:	58 f0       	brcs	.+22     	; 0x6a2 <__divsf3+0x24>
 68c:	0e 94 26 04 	call	0x84c	; 0x84c <__fp_pscA>
 690:	40 f0       	brcs	.+16     	; 0x6a2 <__divsf3+0x24>
 692:	29 f4       	brne	.+10     	; 0x69e <__divsf3+0x20>
 694:	5f 3f       	cpi	r21, 0xFF	; 255
 696:	29 f0       	breq	.+10     	; 0x6a2 <__divsf3+0x24>
 698:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
 69c:	51 11       	cpse	r21, r1
 69e:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_szero>
 6a2:	0c 94 23 04 	jmp	0x846	; 0x846 <__fp_nan>

000006a6 <__divsf3x>:
 6a6:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_split3>
 6aa:	68 f3       	brcs	.-38     	; 0x686 <__divsf3+0x8>

000006ac <__divsf3_pse>:
 6ac:	99 23       	and	r25, r25
 6ae:	b1 f3       	breq	.-20     	; 0x69c <__divsf3+0x1e>
 6b0:	55 23       	and	r21, r21
 6b2:	91 f3       	breq	.-28     	; 0x698 <__divsf3+0x1a>
 6b4:	95 1b       	sub	r25, r21
 6b6:	55 0b       	sbc	r21, r21
 6b8:	bb 27       	eor	r27, r27
 6ba:	aa 27       	eor	r26, r26
 6bc:	62 17       	cp	r22, r18
 6be:	73 07       	cpc	r23, r19
 6c0:	84 07       	cpc	r24, r20
 6c2:	38 f0       	brcs	.+14     	; 0x6d2 <__divsf3_pse+0x26>
 6c4:	9f 5f       	subi	r25, 0xFF	; 255
 6c6:	5f 4f       	sbci	r21, 0xFF	; 255
 6c8:	22 0f       	add	r18, r18
 6ca:	33 1f       	adc	r19, r19
 6cc:	44 1f       	adc	r20, r20
 6ce:	aa 1f       	adc	r26, r26
 6d0:	a9 f3       	breq	.-22     	; 0x6bc <__divsf3_pse+0x10>
 6d2:	35 d0       	rcall	.+106    	; 0x73e <__divsf3_pse+0x92>
 6d4:	0e 2e       	mov	r0, r30
 6d6:	3a f0       	brmi	.+14     	; 0x6e6 <__divsf3_pse+0x3a>
 6d8:	e0 e8       	ldi	r30, 0x80	; 128
 6da:	32 d0       	rcall	.+100    	; 0x740 <__divsf3_pse+0x94>
 6dc:	91 50       	subi	r25, 0x01	; 1
 6de:	50 40       	sbci	r21, 0x00	; 0
 6e0:	e6 95       	lsr	r30
 6e2:	00 1c       	adc	r0, r0
 6e4:	ca f7       	brpl	.-14     	; 0x6d8 <__divsf3_pse+0x2c>
 6e6:	2b d0       	rcall	.+86     	; 0x73e <__divsf3_pse+0x92>
 6e8:	fe 2f       	mov	r31, r30
 6ea:	29 d0       	rcall	.+82     	; 0x73e <__divsf3_pse+0x92>
 6ec:	66 0f       	add	r22, r22
 6ee:	77 1f       	adc	r23, r23
 6f0:	88 1f       	adc	r24, r24
 6f2:	bb 1f       	adc	r27, r27
 6f4:	26 17       	cp	r18, r22
 6f6:	37 07       	cpc	r19, r23
 6f8:	48 07       	cpc	r20, r24
 6fa:	ab 07       	cpc	r26, r27
 6fc:	b0 e8       	ldi	r27, 0x80	; 128
 6fe:	09 f0       	breq	.+2      	; 0x702 <__divsf3_pse+0x56>
 700:	bb 0b       	sbc	r27, r27
 702:	80 2d       	mov	r24, r0
 704:	bf 01       	movw	r22, r30
 706:	ff 27       	eor	r31, r31
 708:	93 58       	subi	r25, 0x83	; 131
 70a:	5f 4f       	sbci	r21, 0xFF	; 255
 70c:	3a f0       	brmi	.+14     	; 0x71c <__divsf3_pse+0x70>
 70e:	9e 3f       	cpi	r25, 0xFE	; 254
 710:	51 05       	cpc	r21, r1
 712:	78 f0       	brcs	.+30     	; 0x732 <__divsf3_pse+0x86>
 714:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
 718:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_szero>
 71c:	5f 3f       	cpi	r21, 0xFF	; 255
 71e:	e4 f3       	brlt	.-8      	; 0x718 <__divsf3_pse+0x6c>
 720:	98 3e       	cpi	r25, 0xE8	; 232
 722:	d4 f3       	brlt	.-12     	; 0x718 <__divsf3_pse+0x6c>
 724:	86 95       	lsr	r24
 726:	77 95       	ror	r23
 728:	67 95       	ror	r22
 72a:	b7 95       	ror	r27
 72c:	f7 95       	ror	r31
 72e:	9f 5f       	subi	r25, 0xFF	; 255
 730:	c9 f7       	brne	.-14     	; 0x724 <__divsf3_pse+0x78>
 732:	88 0f       	add	r24, r24
 734:	91 1d       	adc	r25, r1
 736:	96 95       	lsr	r25
 738:	87 95       	ror	r24
 73a:	97 f9       	bld	r25, 7
 73c:	08 95       	ret
 73e:	e1 e0       	ldi	r30, 0x01	; 1
 740:	66 0f       	add	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	88 1f       	adc	r24, r24
 746:	bb 1f       	adc	r27, r27
 748:	62 17       	cp	r22, r18
 74a:	73 07       	cpc	r23, r19
 74c:	84 07       	cpc	r24, r20
 74e:	ba 07       	cpc	r27, r26
 750:	20 f0       	brcs	.+8      	; 0x75a <__divsf3_pse+0xae>
 752:	62 1b       	sub	r22, r18
 754:	73 0b       	sbc	r23, r19
 756:	84 0b       	sbc	r24, r20
 758:	ba 0b       	sbc	r27, r26
 75a:	ee 1f       	adc	r30, r30
 75c:	88 f7       	brcc	.-30     	; 0x740 <__divsf3_pse+0x94>
 75e:	e0 95       	com	r30
 760:	08 95       	ret

00000762 <__fixunssfsi>:
 762:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_splitA>
 766:	88 f0       	brcs	.+34     	; 0x78a <__fixunssfsi+0x28>
 768:	9f 57       	subi	r25, 0x7F	; 127
 76a:	98 f0       	brcs	.+38     	; 0x792 <__fixunssfsi+0x30>
 76c:	b9 2f       	mov	r27, r25
 76e:	99 27       	eor	r25, r25
 770:	b7 51       	subi	r27, 0x17	; 23
 772:	b0 f0       	brcs	.+44     	; 0x7a0 <__fixunssfsi+0x3e>
 774:	e1 f0       	breq	.+56     	; 0x7ae <__fixunssfsi+0x4c>
 776:	66 0f       	add	r22, r22
 778:	77 1f       	adc	r23, r23
 77a:	88 1f       	adc	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	1a f0       	brmi	.+6      	; 0x786 <__fixunssfsi+0x24>
 780:	ba 95       	dec	r27
 782:	c9 f7       	brne	.-14     	; 0x776 <__fixunssfsi+0x14>
 784:	14 c0       	rjmp	.+40     	; 0x7ae <__fixunssfsi+0x4c>
 786:	b1 30       	cpi	r27, 0x01	; 1
 788:	91 f0       	breq	.+36     	; 0x7ae <__fixunssfsi+0x4c>
 78a:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_zero>
 78e:	b1 e0       	ldi	r27, 0x01	; 1
 790:	08 95       	ret
 792:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_zero>
 796:	67 2f       	mov	r22, r23
 798:	78 2f       	mov	r23, r24
 79a:	88 27       	eor	r24, r24
 79c:	b8 5f       	subi	r27, 0xF8	; 248
 79e:	39 f0       	breq	.+14     	; 0x7ae <__fixunssfsi+0x4c>
 7a0:	b9 3f       	cpi	r27, 0xF9	; 249
 7a2:	cc f3       	brlt	.-14     	; 0x796 <__fixunssfsi+0x34>
 7a4:	86 95       	lsr	r24
 7a6:	77 95       	ror	r23
 7a8:	67 95       	ror	r22
 7aa:	b3 95       	inc	r27
 7ac:	d9 f7       	brne	.-10     	; 0x7a4 <__fixunssfsi+0x42>
 7ae:	3e f4       	brtc	.+14     	; 0x7be <__fixunssfsi+0x5c>
 7b0:	90 95       	com	r25
 7b2:	80 95       	com	r24
 7b4:	70 95       	com	r23
 7b6:	61 95       	neg	r22
 7b8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ba:	8f 4f       	sbci	r24, 0xFF	; 255
 7bc:	9f 4f       	sbci	r25, 0xFF	; 255
 7be:	08 95       	ret

000007c0 <__floatunsisf>:
 7c0:	e8 94       	clt
 7c2:	09 c0       	rjmp	.+18     	; 0x7d6 <__floatsisf+0x12>

000007c4 <__floatsisf>:
 7c4:	97 fb       	bst	r25, 7
 7c6:	3e f4       	brtc	.+14     	; 0x7d6 <__floatsisf+0x12>
 7c8:	90 95       	com	r25
 7ca:	80 95       	com	r24
 7cc:	70 95       	com	r23
 7ce:	61 95       	neg	r22
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	99 23       	and	r25, r25
 7d8:	a9 f0       	breq	.+42     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7da:	f9 2f       	mov	r31, r25
 7dc:	96 e9       	ldi	r25, 0x96	; 150
 7de:	bb 27       	eor	r27, r27
 7e0:	93 95       	inc	r25
 7e2:	f6 95       	lsr	r31
 7e4:	87 95       	ror	r24
 7e6:	77 95       	ror	r23
 7e8:	67 95       	ror	r22
 7ea:	b7 95       	ror	r27
 7ec:	f1 11       	cpse	r31, r1
 7ee:	f8 cf       	rjmp	.-16     	; 0x7e0 <__floatsisf+0x1c>
 7f0:	fa f4       	brpl	.+62     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7f2:	bb 0f       	add	r27, r27
 7f4:	11 f4       	brne	.+4      	; 0x7fa <__floatsisf+0x36>
 7f6:	60 ff       	sbrs	r22, 0
 7f8:	1b c0       	rjmp	.+54     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7fa:	6f 5f       	subi	r22, 0xFF	; 255
 7fc:	7f 4f       	sbci	r23, 0xFF	; 255
 7fe:	8f 4f       	sbci	r24, 0xFF	; 255
 800:	9f 4f       	sbci	r25, 0xFF	; 255
 802:	16 c0       	rjmp	.+44     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 804:	88 23       	and	r24, r24
 806:	11 f0       	breq	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	96 e9       	ldi	r25, 0x96	; 150
 80a:	11 c0       	rjmp	.+34     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 80c:	77 23       	and	r23, r23
 80e:	21 f0       	breq	.+8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 810:	9e e8       	ldi	r25, 0x8E	; 142
 812:	87 2f       	mov	r24, r23
 814:	76 2f       	mov	r23, r22
 816:	05 c0       	rjmp	.+10     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 818:	66 23       	and	r22, r22
 81a:	71 f0       	breq	.+28     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 81c:	96 e8       	ldi	r25, 0x86	; 134
 81e:	86 2f       	mov	r24, r22
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	2a f0       	brmi	.+10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 826:	9a 95       	dec	r25
 828:	66 0f       	add	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	da f7       	brpl	.-10     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 830:	88 0f       	add	r24, r24
 832:	96 95       	lsr	r25
 834:	87 95       	ror	r24
 836:	97 f9       	bld	r25, 7
 838:	08 95       	ret

0000083a <__fp_inf>:
 83a:	97 f9       	bld	r25, 7
 83c:	9f 67       	ori	r25, 0x7F	; 127
 83e:	80 e8       	ldi	r24, 0x80	; 128
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	08 95       	ret

00000846 <__fp_nan>:
 846:	9f ef       	ldi	r25, 0xFF	; 255
 848:	80 ec       	ldi	r24, 0xC0	; 192
 84a:	08 95       	ret

0000084c <__fp_pscA>:
 84c:	00 24       	eor	r0, r0
 84e:	0a 94       	dec	r0
 850:	16 16       	cp	r1, r22
 852:	17 06       	cpc	r1, r23
 854:	18 06       	cpc	r1, r24
 856:	09 06       	cpc	r0, r25
 858:	08 95       	ret

0000085a <__fp_pscB>:
 85a:	00 24       	eor	r0, r0
 85c:	0a 94       	dec	r0
 85e:	12 16       	cp	r1, r18
 860:	13 06       	cpc	r1, r19
 862:	14 06       	cpc	r1, r20
 864:	05 06       	cpc	r0, r21
 866:	08 95       	ret

00000868 <__fp_round>:
 868:	09 2e       	mov	r0, r25
 86a:	03 94       	inc	r0
 86c:	00 0c       	add	r0, r0
 86e:	11 f4       	brne	.+4      	; 0x874 <__fp_round+0xc>
 870:	88 23       	and	r24, r24
 872:	52 f0       	brmi	.+20     	; 0x888 <__fp_round+0x20>
 874:	bb 0f       	add	r27, r27
 876:	40 f4       	brcc	.+16     	; 0x888 <__fp_round+0x20>
 878:	bf 2b       	or	r27, r31
 87a:	11 f4       	brne	.+4      	; 0x880 <__fp_round+0x18>
 87c:	60 ff       	sbrs	r22, 0
 87e:	04 c0       	rjmp	.+8      	; 0x888 <__fp_round+0x20>
 880:	6f 5f       	subi	r22, 0xFF	; 255
 882:	7f 4f       	sbci	r23, 0xFF	; 255
 884:	8f 4f       	sbci	r24, 0xFF	; 255
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	08 95       	ret

0000088a <__fp_split3>:
 88a:	57 fd       	sbrc	r21, 7
 88c:	90 58       	subi	r25, 0x80	; 128
 88e:	44 0f       	add	r20, r20
 890:	55 1f       	adc	r21, r21
 892:	59 f0       	breq	.+22     	; 0x8aa <__fp_splitA+0x10>
 894:	5f 3f       	cpi	r21, 0xFF	; 255
 896:	71 f0       	breq	.+28     	; 0x8b4 <__fp_splitA+0x1a>
 898:	47 95       	ror	r20

0000089a <__fp_splitA>:
 89a:	88 0f       	add	r24, r24
 89c:	97 fb       	bst	r25, 7
 89e:	99 1f       	adc	r25, r25
 8a0:	61 f0       	breq	.+24     	; 0x8ba <__fp_splitA+0x20>
 8a2:	9f 3f       	cpi	r25, 0xFF	; 255
 8a4:	79 f0       	breq	.+30     	; 0x8c4 <__fp_splitA+0x2a>
 8a6:	87 95       	ror	r24
 8a8:	08 95       	ret
 8aa:	12 16       	cp	r1, r18
 8ac:	13 06       	cpc	r1, r19
 8ae:	14 06       	cpc	r1, r20
 8b0:	55 1f       	adc	r21, r21
 8b2:	f2 cf       	rjmp	.-28     	; 0x898 <__fp_split3+0xe>
 8b4:	46 95       	lsr	r20
 8b6:	f1 df       	rcall	.-30     	; 0x89a <__fp_splitA>
 8b8:	08 c0       	rjmp	.+16     	; 0x8ca <__fp_splitA+0x30>
 8ba:	16 16       	cp	r1, r22
 8bc:	17 06       	cpc	r1, r23
 8be:	18 06       	cpc	r1, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	f1 cf       	rjmp	.-30     	; 0x8a6 <__fp_splitA+0xc>
 8c4:	86 95       	lsr	r24
 8c6:	71 05       	cpc	r23, r1
 8c8:	61 05       	cpc	r22, r1
 8ca:	08 94       	sec
 8cc:	08 95       	ret

000008ce <__fp_zero>:
 8ce:	e8 94       	clt

000008d0 <__fp_szero>:
 8d0:	bb 27       	eor	r27, r27
 8d2:	66 27       	eor	r22, r22
 8d4:	77 27       	eor	r23, r23
 8d6:	cb 01       	movw	r24, r22
 8d8:	97 f9       	bld	r25, 7
 8da:	08 95       	ret

000008dc <__gesf2>:
 8dc:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fp_cmp>
 8e0:	08 f4       	brcc	.+2      	; 0x8e4 <__gesf2+0x8>
 8e2:	8f ef       	ldi	r24, 0xFF	; 255
 8e4:	08 95       	ret

000008e6 <__mulsf3>:
 8e6:	0e 94 86 04 	call	0x90c	; 0x90c <__mulsf3x>
 8ea:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_round>
 8ee:	0e 94 26 04 	call	0x84c	; 0x84c <__fp_pscA>
 8f2:	38 f0       	brcs	.+14     	; 0x902 <__stack+0x3>
 8f4:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscB>
 8f8:	20 f0       	brcs	.+8      	; 0x902 <__stack+0x3>
 8fa:	95 23       	and	r25, r21
 8fc:	11 f0       	breq	.+4      	; 0x902 <__stack+0x3>
 8fe:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
 902:	0c 94 23 04 	jmp	0x846	; 0x846 <__fp_nan>
 906:	11 24       	eor	r1, r1
 908:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_szero>

0000090c <__mulsf3x>:
 90c:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_split3>
 910:	70 f3       	brcs	.-36     	; 0x8ee <__mulsf3+0x8>

00000912 <__mulsf3_pse>:
 912:	95 9f       	mul	r25, r21
 914:	c1 f3       	breq	.-16     	; 0x906 <__stack+0x7>
 916:	95 0f       	add	r25, r21
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	55 1f       	adc	r21, r21
 91c:	62 9f       	mul	r22, r18
 91e:	f0 01       	movw	r30, r0
 920:	72 9f       	mul	r23, r18
 922:	bb 27       	eor	r27, r27
 924:	f0 0d       	add	r31, r0
 926:	b1 1d       	adc	r27, r1
 928:	63 9f       	mul	r22, r19
 92a:	aa 27       	eor	r26, r26
 92c:	f0 0d       	add	r31, r0
 92e:	b1 1d       	adc	r27, r1
 930:	aa 1f       	adc	r26, r26
 932:	64 9f       	mul	r22, r20
 934:	66 27       	eor	r22, r22
 936:	b0 0d       	add	r27, r0
 938:	a1 1d       	adc	r26, r1
 93a:	66 1f       	adc	r22, r22
 93c:	82 9f       	mul	r24, r18
 93e:	22 27       	eor	r18, r18
 940:	b0 0d       	add	r27, r0
 942:	a1 1d       	adc	r26, r1
 944:	62 1f       	adc	r22, r18
 946:	73 9f       	mul	r23, r19
 948:	b0 0d       	add	r27, r0
 94a:	a1 1d       	adc	r26, r1
 94c:	62 1f       	adc	r22, r18
 94e:	83 9f       	mul	r24, r19
 950:	a0 0d       	add	r26, r0
 952:	61 1d       	adc	r22, r1
 954:	22 1f       	adc	r18, r18
 956:	74 9f       	mul	r23, r20
 958:	33 27       	eor	r19, r19
 95a:	a0 0d       	add	r26, r0
 95c:	61 1d       	adc	r22, r1
 95e:	23 1f       	adc	r18, r19
 960:	84 9f       	mul	r24, r20
 962:	60 0d       	add	r22, r0
 964:	21 1d       	adc	r18, r1
 966:	82 2f       	mov	r24, r18
 968:	76 2f       	mov	r23, r22
 96a:	6a 2f       	mov	r22, r26
 96c:	11 24       	eor	r1, r1
 96e:	9f 57       	subi	r25, 0x7F	; 127
 970:	50 40       	sbci	r21, 0x00	; 0
 972:	9a f0       	brmi	.+38     	; 0x99a <__mulsf3_pse+0x88>
 974:	f1 f0       	breq	.+60     	; 0x9b2 <__mulsf3_pse+0xa0>
 976:	88 23       	and	r24, r24
 978:	4a f0       	brmi	.+18     	; 0x98c <__mulsf3_pse+0x7a>
 97a:	ee 0f       	add	r30, r30
 97c:	ff 1f       	adc	r31, r31
 97e:	bb 1f       	adc	r27, r27
 980:	66 1f       	adc	r22, r22
 982:	77 1f       	adc	r23, r23
 984:	88 1f       	adc	r24, r24
 986:	91 50       	subi	r25, 0x01	; 1
 988:	50 40       	sbci	r21, 0x00	; 0
 98a:	a9 f7       	brne	.-22     	; 0x976 <__mulsf3_pse+0x64>
 98c:	9e 3f       	cpi	r25, 0xFE	; 254
 98e:	51 05       	cpc	r21, r1
 990:	80 f0       	brcs	.+32     	; 0x9b2 <__mulsf3_pse+0xa0>
 992:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
 996:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_szero>
 99a:	5f 3f       	cpi	r21, 0xFF	; 255
 99c:	e4 f3       	brlt	.-8      	; 0x996 <__mulsf3_pse+0x84>
 99e:	98 3e       	cpi	r25, 0xE8	; 232
 9a0:	d4 f3       	brlt	.-12     	; 0x996 <__mulsf3_pse+0x84>
 9a2:	86 95       	lsr	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	b7 95       	ror	r27
 9aa:	f7 95       	ror	r31
 9ac:	e7 95       	ror	r30
 9ae:	9f 5f       	subi	r25, 0xFF	; 255
 9b0:	c1 f7       	brne	.-16     	; 0x9a2 <__mulsf3_pse+0x90>
 9b2:	fe 2b       	or	r31, r30
 9b4:	88 0f       	add	r24, r24
 9b6:	91 1d       	adc	r25, r1
 9b8:	96 95       	lsr	r25
 9ba:	87 95       	ror	r24
 9bc:	97 f9       	bld	r25, 7
 9be:	08 95       	ret

000009c0 <__fp_cmp>:
 9c0:	99 0f       	add	r25, r25
 9c2:	00 08       	sbc	r0, r0
 9c4:	55 0f       	add	r21, r21
 9c6:	aa 0b       	sbc	r26, r26
 9c8:	e0 e8       	ldi	r30, 0x80	; 128
 9ca:	fe ef       	ldi	r31, 0xFE	; 254
 9cc:	16 16       	cp	r1, r22
 9ce:	17 06       	cpc	r1, r23
 9d0:	e8 07       	cpc	r30, r24
 9d2:	f9 07       	cpc	r31, r25
 9d4:	c0 f0       	brcs	.+48     	; 0xa06 <__fp_cmp+0x46>
 9d6:	12 16       	cp	r1, r18
 9d8:	13 06       	cpc	r1, r19
 9da:	e4 07       	cpc	r30, r20
 9dc:	f5 07       	cpc	r31, r21
 9de:	98 f0       	brcs	.+38     	; 0xa06 <__fp_cmp+0x46>
 9e0:	62 1b       	sub	r22, r18
 9e2:	73 0b       	sbc	r23, r19
 9e4:	84 0b       	sbc	r24, r20
 9e6:	95 0b       	sbc	r25, r21
 9e8:	39 f4       	brne	.+14     	; 0x9f8 <__fp_cmp+0x38>
 9ea:	0a 26       	eor	r0, r26
 9ec:	61 f0       	breq	.+24     	; 0xa06 <__fp_cmp+0x46>
 9ee:	23 2b       	or	r18, r19
 9f0:	24 2b       	or	r18, r20
 9f2:	25 2b       	or	r18, r21
 9f4:	21 f4       	brne	.+8      	; 0x9fe <__fp_cmp+0x3e>
 9f6:	08 95       	ret
 9f8:	0a 26       	eor	r0, r26
 9fa:	09 f4       	brne	.+2      	; 0x9fe <__fp_cmp+0x3e>
 9fc:	a1 40       	sbci	r26, 0x01	; 1
 9fe:	a6 95       	lsr	r26
 a00:	8f ef       	ldi	r24, 0xFF	; 255
 a02:	81 1d       	adc	r24, r1
 a04:	81 1d       	adc	r24, r1
 a06:	08 95       	ret

00000a08 <__itoa_ncheck>:
 a08:	bb 27       	eor	r27, r27
 a0a:	4a 30       	cpi	r20, 0x0A	; 10
 a0c:	31 f4       	brne	.+12     	; 0xa1a <__itoa_ncheck+0x12>
 a0e:	99 23       	and	r25, r25
 a10:	22 f4       	brpl	.+8      	; 0xa1a <__itoa_ncheck+0x12>
 a12:	bd e2       	ldi	r27, 0x2D	; 45
 a14:	90 95       	com	r25
 a16:	81 95       	neg	r24
 a18:	9f 4f       	sbci	r25, 0xFF	; 255
 a1a:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__utoa_common>

00000a1e <__utoa_ncheck>:
 a1e:	bb 27       	eor	r27, r27

00000a20 <__utoa_common>:
 a20:	fb 01       	movw	r30, r22
 a22:	55 27       	eor	r21, r21
 a24:	aa 27       	eor	r26, r26
 a26:	88 0f       	add	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	aa 1f       	adc	r26, r26
 a2c:	a4 17       	cp	r26, r20
 a2e:	10 f0       	brcs	.+4      	; 0xa34 <__utoa_common+0x14>
 a30:	a4 1b       	sub	r26, r20
 a32:	83 95       	inc	r24
 a34:	50 51       	subi	r21, 0x10	; 16
 a36:	b9 f7       	brne	.-18     	; 0xa26 <__utoa_common+0x6>
 a38:	a0 5d       	subi	r26, 0xD0	; 208
 a3a:	aa 33       	cpi	r26, 0x3A	; 58
 a3c:	08 f0       	brcs	.+2      	; 0xa40 <__utoa_common+0x20>
 a3e:	a9 5d       	subi	r26, 0xD9	; 217
 a40:	a1 93       	st	Z+, r26
 a42:	00 97       	sbiw	r24, 0x00	; 0
 a44:	79 f7       	brne	.-34     	; 0xa24 <__utoa_common+0x4>
 a46:	b1 11       	cpse	r27, r1
 a48:	b1 93       	st	Z+, r27
 a4a:	11 92       	st	Z+, r1
 a4c:	cb 01       	movw	r24, r22
 a4e:	0c 94 29 05 	jmp	0xa52	; 0xa52 <strrev>

00000a52 <strrev>:
 a52:	dc 01       	movw	r26, r24
 a54:	fc 01       	movw	r30, r24
 a56:	67 2f       	mov	r22, r23
 a58:	71 91       	ld	r23, Z+
 a5a:	77 23       	and	r23, r23
 a5c:	e1 f7       	brne	.-8      	; 0xa56 <strrev+0x4>
 a5e:	32 97       	sbiw	r30, 0x02	; 2
 a60:	04 c0       	rjmp	.+8      	; 0xa6a <strrev+0x18>
 a62:	7c 91       	ld	r23, X
 a64:	6d 93       	st	X+, r22
 a66:	70 83       	st	Z, r23
 a68:	62 91       	ld	r22, -Z
 a6a:	ae 17       	cp	r26, r30
 a6c:	bf 07       	cpc	r27, r31
 a6e:	c8 f3       	brcs	.-14     	; 0xa62 <strrev+0x10>
 a70:	08 95       	ret

00000a72 <_exit>:
 a72:	f8 94       	cli

00000a74 <__stop_program>:
 a74:	ff cf       	rjmp	.-2      	; 0xa74 <__stop_program>
